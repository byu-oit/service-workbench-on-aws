AWSTemplateFormatVersion: 2010-09-09

Description: Service-Workbench-on-AWS Managed RDS Aurora

Parameters:
  Namespace:
    Type: String
    Description: An environment name that will be prefixed to resource names
  DbEngine:
    Type: String
    Description: Engine type. aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql
  DbUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DbPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DbMinCaacity:
    Type: Number
    Description: Minimum Aurora Capacity Unit
    Default: 1
  DbMaxCapacity:
    Type: Number
    Description: Maximum Aurora Capacity Unit
    Default: 64
  DbSecondsUntilAutoPause:
    Type: Number
    Description: Number of seconds until database auto-pauses
    Default: 300
  AccessFromCIDRBlock:
    Type: String
    Description: The CIDR used to access the CIDR instances.
  IamPolicyDocument:
    Type: String
    Description: The IAM policy to be associated with the launched database
  VPC:
    Description: The VPC in which the database instance will reside
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: The VPC subnet in which the database instance will reside
    Type: AWS::EC2::Subnet::Id
  EncryptionKeyArn:
    Type: String
    Description: The ARN of the KMS encryption Key used to encrypt data in the instance

Conditions:
  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, '{}']

Resources:
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [Ref: Namespace, 'ec2-role']]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - !If
          - IamPolicyEmpty
          - !Ref 'AWS::NoValue'
          - PolicyName: !Join ['-', [Ref: Namespace, 's3-studydata-policy']]
            PolicyDocument: !Ref IamPolicyDocument
        - PolicyName: !Join ['-', [Ref: Namespace, 's3-bootstrap-script-policy']]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 's3:GetObject'
                Resource: !Sub
                  - 'arn:aws:s3:::${S3Location}/*'
                  # Remove "s3://" prefix from EnvironmentInstanceFiles
                  - S3Location: !Select [1, !Split ['s3://', !Ref EnvironmentInstanceFiles]]
              - Effect: 'Allow'
                Action: 's3:ListBucket'
                Resource: !Sub
                  - 'arn:aws:s3:::${S3Bucket}'
                  - S3Bucket: !Select [2, !Split ['/', !Ref EnvironmentInstanceFiles]]
                Condition:
                  StringLike:
                    s3:prefix: !Sub
                      - '${S3Prefix}/*'
                      - S3Prefix: !Select [3, !Split ['/', !Ref EnvironmentInstanceFiles]]

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: RDS workspace security group
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref AccessFromCIDRBlock
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref AccessFromCIDRBlock
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref AccessFromCIDRBlock
      Tags:
        - Key: Name
          Value: !Join ['-', [Ref: Namespace, 'rds-sg']]
        - Key: Description
          Value: RDS workspace security group
      VpcId: !Ref VPC

  RDSCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      AssociatedRoles: !Ref IAMRole
      DatabaseName: ['-', [Ref: Namespace, 'rds-aurora', Ref: DbEngine]]
      DBSubnetGroupName: !Ref Subnet
      EnableHttpEndpoint: 'true'
      EnableIAMDatabaseAuthentication: 'true'
      Engine: !Ref DbEngine
      EngineMode: serverless
      ScalingConfiguration:
        AutoPause: 'true'
        MaxCapacity: !Ref DbMaxCapacity
        MinCapacity: !Ref DbMinCapacity
        SecondsUntilAutoPause: !Ref DbSecondsUntilAutoPause
      KmsKeyId: !Ref EncryptionKeyArn
      StorageEncryted: 'true'
      MasterUser: !Ref DbUsername
      MasterUserPassword: !Ref DbPassword
      VpcSecurityGroupIds:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Join ['-', [Ref: Namespace, 'rds-aurora', Ref: DbEngine]]
        - Key: Description
          Value: Serverless Aurora RDS

Outputs:
  RDSWorkspaceEndpoint:
    Description: Public endpoint address of the RDS workspace instance
    Value: !GetAtt [RDSCluster, Endpoint.Address]

  RDSWorkspacePort:
    Description: Connection port for the RDS workspace instance
    Value: !GetAtt [RDSCluster, Endpoint.Port]

  RDSWorkspaceReadEndpoint:
    Description: Public reader endpoint of the RDS workspace instance
    Value: !GetAtt [RDSCluster, ReadEndpoint.Address]

  WorkspaceInstanceRoleArn:
    Description: IAM role assumed by the EC2 workspace instance
    Value: !GetAtt IAMRole.Arn
